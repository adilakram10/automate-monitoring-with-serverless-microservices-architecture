      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "ExampleAppServerInstance"
        }
      + tags_all                             = {
          + "Name" = "ExampleAppServerInstance"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

  # aws_security_group.prodgroup02 will be created
  + resource "aws_security_group" "prodgroup02" {
      + arn                    = (known after apply)
      + description            = "Security group for EC2 instance"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "prodgroup02"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_sns_topic.lambda_topic02 will be created
  + resource "aws_sns_topic" "lambda_topic02" {
      + arn                         = (known after apply)
      + beginning_archive_time      = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + name                        = "lambda_topic02"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = (known after apply)
      + tracing_config              = (known after apply)
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id        = (known after apply)
  + instance_public_ip = (known after apply)

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
➜  dev-operations terraform apply
data.aws_ami.latest_amazon_linux: Reading...
data.aws_ami.latest_amazon_linux: Read complete after 0s [id=ami-0bfd6f7ee124e618c]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_iam_policy.lambda_policy02 will be created
  + resource "aws_iam_policy" "lambda_policy02" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy for Lambda function"
      + id               = (known after apply)
      + name             = "lambda_policy02"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "ec2:StopInstances"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "ec2:StartInstances"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "sns:Publish"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:sns:us-east-2:992382468626:lambda_topic02"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # aws_iam_role.lambda_iam_role02 will be created
  + resource "aws_iam_role" "lambda_iam_role02" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + description           = "Execution role for Lambda function"
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "lambda_iam_role02"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.lambda_attach will be created
  + resource "aws_iam_role_policy_attachment" "lambda_attach" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "lambda_iam_role02"
    }

  # aws_instance.dev-instance02 will be created
  + resource "aws_instance" "dev-instance02" {
      + ami                                  = "ami-0bfd6f7ee124e618c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "ExampleAppServerInstance"
        }
      + tags_all                             = {
          + "Name" = "ExampleAppServerInstance"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

  # aws_security_group.prodgroup02 will be created
  + resource "aws_security_group" "prodgroup02" {
      + arn                    = (known after apply)
      + description            = "Security group for EC2 instance"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "prodgroup02"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # aws_sns_topic.lambda_topic02 will be created
  + resource "aws_sns_topic" "lambda_topic02" {
      + arn                         = (known after apply)
      + beginning_archive_time      = (known after apply)
      + content_based_deduplication = false
      + fifo_topic                  = false
      + id                          = (known after apply)
      + name                        = "lambda_topic02"
      + name_prefix                 = (known after apply)
      + owner                       = (known after apply)
      + policy                      = (known after apply)
      + signature_version           = (known after apply)
      + tags_all                    = (known after apply)
      + tracing_config              = (known after apply)
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id        = (known after apply)
  + instance_public_ip = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_policy.lambda_policy02: Creating...
aws_iam_role.lambda_iam_role02: Creating...
aws_sns_topic.lambda_topic02: Creating...
aws_security_group.prodgroup02: Creating...
aws_instance.dev-instance02: Creating...
aws_iam_policy.lambda_policy02: Creation complete after 1s [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_iam_role.lambda_iam_role02: Creation complete after 2s [id=lambda_iam_role02]
aws_iam_role_policy_attachment.lambda_attach: Creating...
aws_lambda_function.lambda_function02: Creating...
aws_iam_role_policy_attachment.lambda_attach: Creation complete after 0s [id=lambda_iam_role02-20240704213643826700000002]
aws_sns_topic.lambda_topic02: Creation complete after 2s [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
aws_security_group.prodgroup02: Creation complete after 4s [id=sg-036a70fb52515f700]
aws_instance.dev-instance02: Still creating... [10s elapsed]
aws_instance.dev-instance02: Still creating... [20s elapsed]
aws_instance.dev-instance02: Still creating... [30s elapsed]
aws_instance.dev-instance02: Creation complete after 34s [id=i-0b680795dc65b4d7f]
╷
│ Error: creating Lambda Function (lambda_function02): operation error Lambda: CreateFunction, https response error StatusCode: 400, RequestID: 8fc500e4-a6a1-4d9b-bda2-c8a1268e6757, InvalidParameterValueException: Could not unzip uploaded file. Please check your file, then try to upload again.
│
│   with aws_lambda_function.lambda_function02,
│   on main.tf line 46, in resource "aws_lambda_function" "lambda_function02":
│   46: resource "aws_lambda_function" "lambda_function02" {
│
╵
➜  dev-operations
➜  dev-operations terraform state
Usage: terraform [global options] state <subcommand> [options] [args]

  This command has subcommands for advanced state management.

  These subcommands can be used to slice and dice the Terraform state.
  This is sometimes necessary in advanced cases. For your safety, all
  state management commands that modify the state create a timestamped
  backup of the state prior to making modifications.

  The structure and output of the commands is specifically tailored to work
  well with the common Unix utilities such as grep, awk, etc. We recommend
  using those tools to perform more advanced state tasks.

Subcommands:
    list                List resources in the state
    mv                  Move an item in the state
    pull                Pull current state and output to stdout
    push                Update remote state from a local state file
    replace-provider    Replace provider in the state
    rm                  Remove instances from the state
    show                Show a resource in the state
➜  dev-operations terraform state show
Exactly one argument expected.
Usage: terraform [global options] state show [options] ADDRESS

  Shows the attributes of a resource in the Terraform state.

  This command shows the attributes of a single resource in the Terraform
  state. The address argument must be used to specify a single resource.
  You can view the list of available resources with "terraform state list".

Options:

  -state=statefile    Path to a Terraform state file to use to look
# Configure the AWS provider
provider "aws" {
  region = "us-east-2"
}

# Fetch latest Linux AMI
data "aws_ami" "latest_amazon_linux" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm-*-x86_64-ebs"]
  }
}

# Create an EC2 instance
resource "aws_instance" "dev-instance02" {
  ami           = data.aws_ami.latest_amazon_linux.id
  instance_type = "t2.micro"

  tags = {
    Name = var.instance_name
  }
}

# Create a security group for the EC2 instance
resource "aws_security_group" "prodgroup02" {
  name        = "prodgroup02"
  description = "Security group for EC2 instance"

  ingress {
    from_port   = 22
# Create an SNS topic
resource "aws_sns_topic" "lambda_topic02" {
  name = "lambda_topic02"
}


# Create the Lambda function
resource "aws_lambda_function" "lambda_function02" {
  filename      = "/Users/admin/terraform/scripts/lambda_function.py.gz"
  function_name = "lambda_function02"
                      up Terraform-managed resources. By default it will
                      use the state "terraform.tfstate" if it exists.
➜  dev-operations terraform state  list
data.aws_ami.latest_amazon_linux
aws_iam_policy.lambda_policy02
aws_iam_role.lambda_iam_role02
aws_iam_role_policy_attachment.lambda_attach
aws_instance.dev-instance02
aws_security_group.prodgroup02
aws_sns_topic.lambda_topic02
➜  dev-operations cd ../script
cd: no such file or directory: ../script
➜  dev-operations pwd
/Users/admin/terraform/dev-operations
➜  dev-operations cd ../scripts
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
➜  scripts compress lambda_function.py
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  530 Jul  4 14:51 lambda_function.py.Z
➜  scripts unzip lambda_function.py.Z
Archive:  lambda_function.py.Z
  End-of-central-directory signature not found.  Either this file is not
  a zipfile, or it constitutes one disk of a multi-part archive.  In the
  latter case the central directory and zipfile comment will be found on
  the last disk(s) of this archive.
unzip:  cannot find zipfile directory in one of lambda_function.py.Z or
        lambda_function.py.Z.zip, and cannot find lambda_function.py.Z.ZIP, period.
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  530 Jul  4 14:51 lambda_function.py.Z
➜  scripts gzip lambda_function.py.Z
gzip: lambda_function.py.Z already has .Z suffix -- unchanged
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  530 Jul  4 14:51 lambda_function.py.Z
➜  scripts uncompress lambda_function.py.Z
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
➜  scripts
➜  scripts
➜  scripts zip lambda_function.py
	zip warning: missing end signature--probably not a zip file (did you
	zip warning: remember to use binary mode when you transferred it?)
	zip warning: (if you are trying to read a damaged archive try -F)

zip error: Zip file structure invalid (lambda_function.py)
➜  scripts gzip lambda_function.py
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  411 Jul  4 14:51 lambda_function.py.gz
➜  scripts gunzip lambda_function.py.gz
➜  scripts ls -ltr
total 8
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
➜  scripts zip lambda_function.py
	zip warning: missing end signature--probably not a zip file (did you
	zip warning: remember to use binary mode when you transferred it?)
	zip warning: (if you are trying to read a damaged archive try -F)

zip error: Zip file structure invalid (lambda_function.py)
➜  scripts ls -ltr
total 8
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
➜  scripts gzip lambda_function.py
➜  scripts ls -ltr
total 8
-rw-r--r--@ 1 admin  staff  411 Jul  4 14:51 lambda_function.py.gz
➜  scripts cd -
~/terraform/dev-operations
➜  dev-operations vi main.tf
➜  dev-operations
➜  dev-operations
➜  dev-operations
➜  dev-operations terraform state
Usage: terraform [global options] state <subcommand> [options] [args]

  This command has subcommands for advanced state management.

  These subcommands can be used to slice and dice the Terraform state.
  This is sometimes necessary in advanced cases. For your safety, all
  state management commands that modify the state create a timestamped
  backup of the state prior to making modifications.

  The structure and output of the commands is specifically tailored to work
  well with the common Unix utilities such as grep, awk, etc. We recommend
  using those tools to perform more advanced state tasks.

Subcommands:
    list                List resources in the state
    mv                  Move an item in the state
    pull                Pull current state and output to stdout
    push                Update remote state from a local state file
    replace-provider    Replace provider in the state
    rm                  Remove instances from the state
    show                Show a resource in the state
➜  dev-operations
➜  dev-operations
➜  dev-operations terraform state list
data.aws_ami.latest_amazon_linux
aws_iam_policy.lambda_policy02
aws_iam_role.lambda_iam_role02
aws_iam_role_policy_attachment.lambda_attach
aws_instance.dev-instance02
aws_security_group.prodgroup02
aws_sns_topic.lambda_topic02
➜  dev-operations
➜  dev-operations
➜  dev-operations terraform plan
data.aws_ami.latest_amazon_linux: Reading...
aws_iam_policy.lambda_policy02: Refreshing state... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_iam_role.lambda_iam_role02: Refreshing state... [id=lambda_iam_role02]
aws_sns_topic.lambda_topic02: Refreshing state... [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
aws_security_group.prodgroup02: Refreshing state... [id=sg-036a70fb52515f700]
data.aws_ami.latest_amazon_linux: Read complete after 1s [id=ami-0bfd6f7ee124e618c]
aws_instance.dev-instance02: Refreshing state... [id=i-0b680795dc65b4d7f]
aws_iam_role_policy_attachment.lambda_attach: Refreshing state... [id=lambda_iam_role02-20240704213643826700000002]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # aws_iam_policy.lambda_policy02 will be updated in-place
  ~ resource "aws_iam_policy" "lambda_policy02" {
        id               = "arn:aws:iam::992382468626:policy/lambda_policy02"
        name             = "lambda_policy02"
      ~ policy           = jsonencode(
          ~ {
              ~ Statement = [
                    # (2 unchanged elements hidden)
                    {
                        Action   = "sns:Publish"
                        Effect   = "Allow"
                        Resource = "arn:aws:sns:us-east-2:992382468626:lambda_topic02"
                    },
                  + {
                      + Action   = "logs:CreateLogGroup"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                  + {
                      + Action   = "logs:CreateLogStream"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                  + {
                      + Action   = "logs:PutLogEvents"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                ]
                # (1 unchanged attribute hidden)
            }
        )
        tags             = {}
        # (7 unchanged attributes hidden)
    }

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py.gz"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::992382468626:role/lambda_iam_role02"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

Plan: 1 to add, 1 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
➜  dev-operations terraform apply
data.aws_ami.latest_amazon_linux: Reading...
aws_iam_policy.lambda_policy02: Refreshing state... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_iam_role.lambda_iam_role02: Refreshing state... [id=lambda_iam_role02]
aws_sns_topic.lambda_topic02: Refreshing state... [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
aws_security_group.prodgroup02: Refreshing state... [id=sg-036a70fb52515f700]
data.aws_ami.latest_amazon_linux: Read complete after 1s [id=ami-0bfd6f7ee124e618c]
aws_instance.dev-instance02: Refreshing state... [id=i-0b680795dc65b4d7f]
aws_iam_role_policy_attachment.lambda_attach: Refreshing state... [id=lambda_iam_role02-20240704213643826700000002]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # aws_iam_policy.lambda_policy02 will be updated in-place
  ~ resource "aws_iam_policy" "lambda_policy02" {
        id               = "arn:aws:iam::992382468626:policy/lambda_policy02"
        name             = "lambda_policy02"
      ~ policy           = jsonencode(
          ~ {
              ~ Statement = [
                    # (2 unchanged elements hidden)
                    {
                        Action   = "sns:Publish"
                        Effect   = "Allow"
                        Resource = "arn:aws:sns:us-east-2:992382468626:lambda_topic02"
                    },
                  + {
                      + Action   = "logs:CreateLogGroup"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                  + {
                      + Action   = "logs:CreateLogStream"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                  + {
                      + Action   = "logs:PutLogEvents"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                ]
                # (1 unchanged attribute hidden)
            }
        )
        tags             = {}
        # (7 unchanged attributes hidden)
    }

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py.gz"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::992382468626:role/lambda_iam_role02"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

Plan: 1 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: ye

Apply cancelled.
➜  dev-operations terraform apply
data.aws_ami.latest_amazon_linux: Reading...
aws_iam_policy.lambda_policy02: Refreshing state... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_iam_role.lambda_iam_role02: Refreshing state... [id=lambda_iam_role02]
aws_sns_topic.lambda_topic02: Refreshing state... [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
aws_security_group.prodgroup02: Refreshing state... [id=sg-036a70fb52515f700]
data.aws_ami.latest_amazon_linux: Read complete after 1s [id=ami-0bfd6f7ee124e618c]
aws_instance.dev-instance02: Refreshing state... [id=i-0b680795dc65b4d7f]
aws_iam_role_policy_attachment.lambda_attach: Refreshing state... [id=lambda_iam_role02-20240704213643826700000002]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # aws_iam_policy.lambda_policy02 will be updated in-place
  ~ resource "aws_iam_policy" "lambda_policy02" {
        id               = "arn:aws:iam::992382468626:policy/lambda_policy02"
        name             = "lambda_policy02"
      ~ policy           = jsonencode(
          ~ {
              ~ Statement = [
                    # (2 unchanged elements hidden)
                    {
                        Action   = "sns:Publish"
                        Effect   = "Allow"
                        Resource = "arn:aws:sns:us-east-2:992382468626:lambda_topic02"
                    },
                  + {
                      + Action   = "logs:CreateLogGroup"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                  + {
                      + Action   = "logs:CreateLogStream"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                  + {
                      + Action   = "logs:PutLogEvents"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:us-east-2:*:*"
                    },
                ]
                # (1 unchanged attribute hidden)
            }
        )
        tags             = {}
        # (7 unchanged attributes hidden)
    }

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py.gz"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::992382468626:role/lambda_iam_role02"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

Plan: 1 to add, 1 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_policy.lambda_policy02: Modifying... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_lambda_function.lambda_function02: Creating...
aws_iam_policy.lambda_policy02: Modifications complete after 1s [id=arn:aws:iam::992382468626:policy/lambda_policy02]
╷
│ Error: creating Lambda Function (lambda_function02): operation error Lambda: CreateFunction, https response error StatusCode: 400, RequestID: e4bf352f-2dd0-4eec-bcae-3d3f35cc86a0, InvalidParameterValueException: Could not unzip uploaded file. Please check your file, then try to upload again.
│
│   with aws_lambda_function.lambda_function02,
│   on main.tf line 46, in resource "aws_lambda_function" "lambda_function02":
│   46: resource "aws_lambda_function" "lambda_function02" {
│
╵
➜  dev-operations vi main.tf
➜  dev-operations cd -
~/terraform/scripts
# Configure the AWS provider
➜  scripts ls -ltr
total 8
-rw-r--r--@ 1 admin  staff  411 Jul  4 14:51 lambda_function.py.gz
➜  scripts unzip lambda_function.py.gz
Archive:  lambda_function.py.gz
  End-of-central-directory signature not found.  Either this file is not
  a zipfile, or it constitutes one disk of a multi-part archive.  In the
  latter case the central directory and zipfile comment will be found on
  the last disk(s) of this archive.
unzip:  cannot find zipfile directory in one of lambda_function.py.gz or
        lambda_function.py.gz.zip, and cannot find lambda_function.py.gz.ZIP, period.
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  411 Jul  4 14:51 lambda_function.py.gz
➜  scripts
➜  scripts
➜  scripts gzip lambda_function.py.gz
gzip: lambda_function.py.gz already has .gz suffix -- unchanged
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  411 Jul  4 14:51 lambda_function.py.gz
➜  scripts gunzip lambda_function.py.gz
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
➜  scripts
➜  scripts
➜  scripts
➜  scripts
➜  scripts zip
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
Zip 3.0 (July 5th 2008). Usage:
zip [-options] [-b path] [-t mmddyyyy] [-n suffixes] [zipfile list] [-xi list]
  The default action is to add or replace zipfile entries from list, which
  can include the special name - to compress standard input.
  If zipfile and list are omitted, zip compresses stdin to stdout.
  -f   freshen: only changed files  -u   update: only changed or new files
  -d   delete entries in zipfile    -m   move into zipfile (delete OS files)
  -r   recurse into directories     -j   junk (don't record) directory names
  -0   store only                   -l   convert LF to CR LF (-ll CR LF to LF)
  -1   compress faster              -9   compress better
  -q   quiet operation              -v   verbose operation/print version info
  -c   add one-line comments        -z   add zipfile comment
  -@   read names from stdin        -o   make zipfile as old as latest entry
  -x   exclude the following names  -i   include only the following names
  -F   fix zipfile (-FF try harder) -D   do not add directory entries
  -A   adjust self-extracting exe   -J   junk zipfile prefix (unzipsfx)
  -T   test zipfile integrity       -X   eXclude eXtra file attributes
  -y   store symbolic links as the link instead of the referenced file
  -e   encrypt                      -n   don't compress these suffixes
  -h2  show more help

➜  scripts zip lambda_function.py
	zip warning: missing end signature--probably not a zip file (did you
	zip warning: remember to use binary mode when you transferred it?)
	zip warning: (if you are trying to read a damaged archive try -F)

zip error: Zip file structure invalid (lambda_function.py)
➜  scripts ls -tlr
total 8
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
➜  scripts vi lambda_function.py
➜  scripts
➜  scripts
➜  scripts zip -r lambda_function.py.zip lambda_function.py
  adding: lambda_function.py (deflated 52%)
➜  scripts ls -tlr
total 16
-rw-r--r--@ 1 admin  staff  773 Jul  4 14:51 lambda_function.py
-rw-r--r--@ 1 admin  staff  560 Jul  4 16:57 lambda_function.py.zip
➜  scripts cd -
~/terraform/dev-operations
➜  dev-operations vi main.tf
➜  dev-operations vi main.tf
➜  dev-operations
➜  dev-operations
➜  dev-operations terraform plan
data.aws_ami.latest_amazon_linux: Reading...
aws_iam_policy.lambda_policy02: Refreshing state... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_iam_role.lambda_iam_role02: Refreshing state... [id=lambda_iam_role02]
aws_sns_topic.lambda_topic02: Refreshing state... [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
aws_security_group.prodgroup02: Refreshing state... [id=sg-036a70fb52515f700]
data.aws_ami.latest_amazon_linux: Read complete after 1s [id=ami-0bfd6f7ee124e618c]
aws_instance.dev-instance02: Refreshing state... [id=i-0b680795dc65b4d7f]
aws_iam_role_policy_attachment.lambda_attach: Refreshing state... [id=lambda_iam_role02-20240704213643826700000002]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py.zip"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::992382468626:role/lambda_iam_role02"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
➜  dev-operations terraform apply
data.aws_ami.latest_amazon_linux: Reading...
aws_iam_policy.lambda_policy02: Refreshing state... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_sns_topic.lambda_topic02: Refreshing state... [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
aws_iam_role.lambda_iam_role02: Refreshing state... [id=lambda_iam_role02]
aws_security_group.prodgroup02: Refreshing state... [id=sg-036a70fb52515f700]
data.aws_ami.latest_amazon_linux: Read complete after 0s [id=ami-0bfd6f7ee124e618c]
aws_instance.dev-instance02: Refreshing state... [id=i-0b680795dc65b4d7f]
aws_iam_role_policy_attachment.lambda_attach: Refreshing state... [id=lambda_iam_role02-20240704213643826700000002]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_lambda_function.lambda_function02 will be created
  + resource "aws_lambda_function" "lambda_function02" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "/Users/admin/terraform/scripts/lambda_function.py.zip"
      + function_name                  = "lambda_function02"
      + handler                        = "index.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = "arn:aws:iam::992382468626:role/lambda_iam_role02"
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_lambda_function.lambda_function02: Creating...
aws_lambda_function.lambda_function02: Creation complete after 6s [id=lambda_function02]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

instance_id = "i-0b680795dc65b4d7f"
instance_public_ip = "3.135.65.245"
➜  dev-operations
➜  dev-operations
➜  dev-operations terraform state
Usage: terraform [global options] state <subcommand> [options] [args]

  This command has subcommands for advanced state management.

  These subcommands can be used to slice and dice the Terraform state.
  This is sometimes necessary in advanced cases. For your safety, all
  state management commands that modify the state create a timestamped
  backup of the state prior to making modifications.

  The structure and output of the commands is specifically tailored to work
  well with the common Unix utilities such as grep, awk, etc. We recommend
  using those tools to perform more advanced state tasks.

Subcommands:
    list                List resources in the state
    mv                  Move an item in the state
    pull                Pull current state and output to stdout
    push                Update remote state from a local state file
    replace-provider    Replace provider in the state
    rm                  Remove instances from the state
    show                Show a resource in the state
➜  dev-operations
➜  dev-operations
➜  dev-operations terraform state list
data.aws_ami.latest_amazon_linux
aws_iam_policy.lambda_policy02
aws_iam_role.lambda_iam_role02
aws_iam_role_policy_attachment.lambda_attach
aws_instance.dev-instance02
aws_lambda_function.lambda_function02
aws_security_group.prodgroup02
aws_sns_topic.lambda_topic02
➜  dev-operations terraform plan
data.aws_ami.latest_amazon_linux: Reading...
aws_iam_policy.lambda_policy02: Refreshing state... [id=arn:aws:iam::992382468626:policy/lambda_policy02]
aws_iam_role.lambda_iam_role02: Refreshing state... [id=lambda_iam_role02]
aws_security_group.prodgroup02: Refreshing state... [id=sg-036a70fb52515f700]
aws_sns_topic.lambda_topic02: Refreshing state... [id=arn:aws:sns:us-east-2:992382468626:lambda_topic02]
data.aws_ami.latest_amazon_linux: Read complete after 1s [id=ami-0bfd6f7ee124e618c]
aws_instance.dev-instance02: Refreshing state... [id=i-0b680795dc65b4d7f]
aws_iam_role_policy_attachment.lambda_attach: Refreshing state... [id=lambda_iam_role02-20240704213643826700000002]
aws_lambda_function.lambda_function02: Refreshing state... [id=lambda_function02]
